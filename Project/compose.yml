version: "3"
services:
  service-discovery-server:
    container_name: service-discovery-server
    image: service-discovery-server
    ports:
      - "8761:8761"
    networks:
      - backendnet

  api-gateway:
    container_name: api-gateway
    image: api-gateway
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-discovery-server:8761/eureka/
    ports:
      - "8080:8080"
    depends_on:
      - service-discovery-server
    networks:
      - backendnet

  dbpostgresql:
    container_name: postgres
    image: "postgres"
    ports:
      - "5432:5432"
    networks:
      - backendnet
    environment:
      POSTGRES_DB: services
     # POSTGRES_MULTIPLE_DB: postgres,user-service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: root
      restart: unless-stopped

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
      PGADMIN_LISTEN_PORT: 50
    ports:
      - "5050:50"
    depends_on:
      - dbpostgresql
    networks:
      - backendnet

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: test

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: user
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_URL: mongodb://user:root@mongo:27017/

  user-service:
    container_name: user-service
    image: user-service #Ricordarsi assolutamente che il nome dell'image deve essere assolutamente concorde con quello del 'docker image build -t user-service'
    ports:
      - "8083:8083"
    depends_on:
      - dbpostgresql
      - service-discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.serviceUrl.defaultZone=http://service-discovery-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://dbpostgresql:5432/services
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - backendnet

  profile-service:
    container_name: profile-service
    image: profile-service #Ricordarsi assolutamente che il nome dell'image deve essere assolutamente concorde con quello del 'docker image build -t user-service'
    ports:
      - "8082:8082"
    depends_on:
      - dbpostgresql
      - service-discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.serviceUrl.defaultZone=http://service-discovery-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://dbpostgresql:5432/services
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - backendnet
  google-service:
    container_name: google-service
    image: google-service #Ricordarsi assolutamente che il nome dell'image deve essere assolutamente concorde con quello del 'docker image build -t user-service'
    ports:
      - "9191:9191"
    depends_on:
      - service-discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.serviceUrl.defaultZone=http://service-discovery-server:8761/eureka/
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - backendnet

  netflix-service:
    container_name: netflix-service
    image: netflix-service #Ricordarsi assolutamente che il nome dell'image deve essere assolutamente concorde con quello del 'docker image build -t user-service'
    ports:
      - "8091:8091"
    depends_on:
      - service-discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.serviceUrl.defaultZone=http://service-discovery-server:8761/eureka/
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - backendnet

  prime-service:
    container_name: prime-service
    image: prime-service #Ricordarsi assolutamente che il nome dell'image deve essere assolutamente concorde con quello del 'docker image build -t user-service'
    ports:
      - "8090:8090"
    depends_on:
      - service-discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.serviceUrl.defaultZone=http://service-discovery-server:8761/eureka/
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - backendnet


networks:
  backendnet:
    driver: bridge
